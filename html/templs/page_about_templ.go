// Code generated by templ@v0.2.364 DO NOT EDIT.

package templs

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func PageAbout() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			var_3 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
				templBuffer, templIsBuffer := w.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				_, err = templBuffer.WriteString("<div class=\"p-4 bg-white w-3/4 text-xl\"><i class=\"text-8xl fa-solid fa-gifts float-left pr-4\"></i><p class=\"py-4\">")
				if err != nil {
					return err
				}
				var_4 := `Cohabitaters lets you aggregate your Google Contacts by their mailing`
				_, err = templBuffer.WriteString(var_4)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				var_5 := `address, created ahead of the holiday season to help simplify our holiday cards. Instead of keeping`
				_, err = templBuffer.WriteString(var_5)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				var_6 := `a separate list or spreadsheet just for address, you can generate the names and addresses`
				_, err = templBuffer.WriteString(var_6)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				var_7 := `directly from your contacts.`
				_, err = templBuffer.WriteString(var_7)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</p><p class=\"pt-2\">")
				if err != nil {
					return err
				}
				var_8 := `Basic workflow`
				_, err = templBuffer.WriteString(var_8)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</p><ol class=\"list-decimal list-inside py-2\"><li><span>")
				if err != nil {
					return err
				}
				var_9 := `make sure addresses are up-to-date in`
				_, err = templBuffer.WriteString(var_9)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" <a href=\"https://contacts.google.com\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-medium text-blue-600 underline dark:text-blue-500 hover:no-underline\">")
				if err != nil {
					return err
				}
				var_10 := `Google Contacts`
				_, err = templBuffer.WriteString(var_10)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</a></span></li><li>")
				if err != nil {
					return err
				}
				var_11 := `(optional) apply a label to the contacts you want included`
				_, err = templBuffer.WriteString(var_11)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</li><li>")
				if err != nil {
					return err
				}
				var_12 := `select your new label or an existing one (e.g. "Starred") from the drop-down`
				_, err = templBuffer.WriteString(var_12)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</li></ol><p>")
				if err != nil {
					return err
				}
				var_13 := `You'll see a table of your contacts grouped by their address. It's a Christmas miracle.`
				_, err = templBuffer.WriteString(var_13)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</p></div>")
				if err != nil {
					return err
				}
				if !templIsBuffer {
					_, err = io.Copy(w, templBuffer)
				}
				return err
			})
			err = standardLayout().Render(templ.WithChildren(ctx, var_3), templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = wrapBody().Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
