package templs

import (
	"strconv"
)

templ Results(inp PageIndexInput) {
	if len(inp.GroupErrorMsg) > 0 {
		<div
 			id="groups-alert-1"
 			class="dismissible flex max-w-screen-sm p-4 my-4 bg-yellow-100 rounded-lg dark:bg-yellow-200"
 			role="alert"
		>
			<svg
 				aria-hidden="true"
 				class="flex-shrink-0 w-5 h-5 text-yellow-700 dark:text-yellow-800"
 				fill="currentColor"
 				viewBox="0 0 20 20"
 				xmlns="http://www.w3.org/2000/svg"
			>
				<path
 					fill-rule="evenodd"
 					d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
 					clip-rule="evenodd"
				></path>
			</svg>
			<span class="sr-only">Info</span>
			<div class="ml-3 text-sm font-medium text-yellow-700 dark:text-yellow-800">
				{ inp.GroupErrorMsg }
			</div>
			<button
 				type="button"
 				class="ml-auto -mx-1.5 -my-1.5 bg-yellow-100 text-yellow-500 rounded-lg focus:ring-2 focus:ring-yellow-400 p-1.5 hover:bg-yellow-200 inline-flex h-8 w-8 dark:bg-yellow-200 dark:text-yellow-600 dark:hover:bg-yellow-300"
 				data-dismiss-target="#groups-alert-1"
 				aria-label="Close"
 				_="on click remove #groups-alert-1"
			>
				<span class="sr-only">Close</span>
				<svg
 					aria-hidden="true"
 					class="w-5 h-5"
 					fill="currentColor"
 					viewBox="0 0 20 20"
 					xmlns="http://www.w3.org/2000/svg"
				>
					<path
 						fill-rule="evenodd"
 						d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
 						clip-rule="evenodd"
					></path>
				</svg>
			</button>
		</div>
	} else {
		<p class="p-2">
			Coalesced 
			{ strconv.Itoa(inp.CountContacts) }
			contacts down to 
			{ strconv.Itoa(len(inp.TableResults)) }
			unique addresses.
		</p>
		<div class="overflow-x-auto relative">
			<table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
				<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
					<tr>
						<th scope="col" class="py-3 px-6">
							Names
						</th>
						<th scope="col" class="py-3 px-6">
							Street Address
						</th>
						<th scope="col" class="py-3 px-6">
							City State
						</th>
						<th scope="col" class="py-3 px-6">
							Country
						</th>
						<th scope="col" class="py-3 px-6">
							Zip
						</th>
					</tr>
				</thead>
				<tbody>
					for _, result := range inp.TableResults {
						<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
							<th scope="row" class="py-4 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white">
								for idx, name := range result.Names {
									if idx > 0 {
										,&nbsp;
									}
									{ name }
								}
							</th>
							<td class="py-4 px-6">
								<p>{ result.Address.StreetAddress }<br/>{ result.Address.StreetAddress2 }</p>
							</td>
							<td class="py-4 px-6">
								{ result.Address.City }
								,&nbsp;
								{ result.Address.Region }
							</td>
							<td class="py-4 px-6">
								{ result.Address.Country }
							</td>
							<td class="py-4 px-6">
								{ result.Address.PostalCode }
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
}
