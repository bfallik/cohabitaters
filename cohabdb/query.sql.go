// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package cohabdb

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id, user_id
) VALUES (
  ?, ?
)
RETURNING id, user_id, created_at, is_logged_in
`

type CreateSessionParams struct {
	ID     int64
	UserID sql.NullInt64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.IsLoggedIn,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT OR REPLACE INTO users (
  full_name,
  sub
) VALUES (
  ?, ?
)
RETURNING id, sub, full_name, token
`

type CreateUserParams struct {
	FullName sql.NullString
	Sub      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FullName, arg.Sub)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Sub,
		&i.FullName,
		&i.Token,
	)
	return i, err
}

const expireSession = `-- name: ExpireSession :exec
UPDATE sessions
SET is_logged_in = false
WHERE id = ?
`

func (q *Queries) ExpireSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, expireSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, created_at, is_logged_in FROM sessions
WHERE ID = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id int64) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.IsLoggedIn,
	)
	return i, err
}

const getToken = `-- name: GetToken :one
SELECT token FROM users u
INNER JOIN sessions s
ON u.id = s.user_id
WHERE s.id = ? LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, id int64) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getToken, id)
	var token sql.NullString
	err := row.Scan(&token)
	return token, err
}

const getUser = `-- name: GetUser :one
SELECT id, sub, full_name, token FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Sub,
		&i.FullName,
		&i.Token,
	)
	return i, err
}

const getUserBySub = `-- name: GetUserBySub :one
SELECT id, sub, full_name, token FROM users
WHERE sub = ? LIMIT 1
`

func (q *Queries) GetUserBySub(ctx context.Context, sub string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBySub, sub)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Sub,
		&i.FullName,
		&i.Token,
	)
	return i, err
}

const updateTokenBySession = `-- name: UpdateTokenBySession :exec
UPDATE users
SET token = ?
WHERE (
  SELECT user_id
  FROM sessions
  WHERE sessions.id = ?
  AND users.id = user_id
)
`

type UpdateTokenBySessionParams struct {
	Token sql.NullString
	ID    int64
}

func (q *Queries) UpdateTokenBySession(ctx context.Context, arg UpdateTokenBySessionParams) error {
	_, err := q.db.ExecContext(ctx, updateTokenBySession, arg.Token, arg.ID)
	return err
}
