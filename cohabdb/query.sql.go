// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package cohabdb

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id, user_id
) VALUES (
  ?, ?
)
RETURNING id, user_id, created_at, is_logged_in
`

type CreateSessionParams struct {
	ID     int64
	UserID sql.NullInt64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.IsLoggedIn,
	)
	return i, err
}

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
  id, user_id, token
) VALUES (
  ?, ?, ?
)
RETURNING id, user_id, token
`

type CreateTokenParams struct {
	ID     int64
	UserID int64
	Token  string
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.ID, arg.UserID, arg.Token)
	var i Token
	err := row.Scan(&i.ID, &i.UserID, &i.Token)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT OR REPLACE INTO users (
  full_name,
  sub
) VALUES (
  ?, ?
)
RETURNING id, sub, full_name
`

type CreateUserParams struct {
	FullName sql.NullString
	Sub      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FullName, arg.Sub)
	var i User
	err := row.Scan(&i.ID, &i.Sub, &i.FullName)
	return i, err
}

const expireSession = `-- name: ExpireSession :exec
UPDATE sessions SET is_logged_in = false
WHERE id = ?
`

func (q *Queries) ExpireSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, expireSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, created_at, is_logged_in FROM sessions
WHERE ID = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id int64) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.IsLoggedIn,
	)
	return i, err
}

const getToken = `-- name: GetToken :one
SELECT id, user_id, token FROM tokens
WHERE id = ? LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, id int64) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, id)
	var i Token
	err := row.Scan(&i.ID, &i.UserID, &i.Token)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, sub, full_name FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Sub, &i.FullName)
	return i, err
}

const getUserBySub = `-- name: GetUserBySub :one
SELECT id, sub, full_name FROM users
WHERE sub = ? LIMIT 1
`

func (q *Queries) GetUserBySub(ctx context.Context, sub string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBySub, sub)
	var i User
	err := row.Scan(&i.ID, &i.Sub, &i.FullName)
	return i, err
}
