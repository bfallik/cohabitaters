// Code generated by templ@v0.2.364 DO NOT EDIT.

package templs

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"strconv"
)

func Results(inp PageIndexInput) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if len(inp.GroupErrorMsg) > 0 {
			_, err = templBuffer.WriteString("<div id=\"groups-alert-1\" class=\"dismissible flex max-w-screen-sm p-4 my-4 bg-yellow-100 rounded-lg dark:bg-yellow-200\" role=\"alert\"><svg aria-hidden=\"true\" class=\"flex-shrink-0 w-5 h-5 text-yellow-700 dark:text-yellow-800\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\"></path></svg><span class=\"sr-only\">")
			if err != nil {
				return err
			}
			var_2 := `Info`
			_, err = templBuffer.WriteString(var_2)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span><div class=\"ml-3 text-sm font-medium text-yellow-700 dark:text-yellow-800\">")
			if err != nil {
				return err
			}
			var var_3 string = inp.GroupErrorMsg
			_, err = templBuffer.WriteString(templ.EscapeString(var_3))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div><button type=\"button\" class=\"ml-auto -mx-1.5 -my-1.5 bg-yellow-100 text-yellow-500 rounded-lg focus:ring-2 focus:ring-yellow-400 p-1.5 hover:bg-yellow-200 inline-flex h-8 w-8 dark:bg-yellow-200 dark:text-yellow-600 dark:hover:bg-yellow-300\" data-dismiss-target=\"#groups-alert-1\" aria-label=\"Close\" _=\"on click remove #groups-alert-1\"><span class=\"sr-only\">")
			if err != nil {
				return err
			}
			var_4 := `Close`
			_, err = templBuffer.WriteString(var_4)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span><svg aria-hidden=\"true\" class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path></svg></button></div>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<p class=\"p-2\">")
			if err != nil {
				return err
			}
			var_5 := `Coalesced `
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var var_6 string = strconv.Itoa(inp.CountContacts)
			_, err = templBuffer.WriteString(templ.EscapeString(var_6))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_7 := `contacts down to `
			_, err = templBuffer.WriteString(var_7)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var var_8 string = strconv.Itoa(len(inp.TableResults))
			_, err = templBuffer.WriteString(templ.EscapeString(var_8))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_9 := `unique addresses.`
			_, err = templBuffer.WriteString(var_9)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p> <div class=\"overflow-x-auto relative\"><table class=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\"><thead class=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\"><tr><th scope=\"col\" class=\"py-3 px-6\">")
			if err != nil {
				return err
			}
			var_10 := `Names`
			_, err = templBuffer.WriteString(var_10)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><th scope=\"col\" class=\"py-3 px-6\">")
			if err != nil {
				return err
			}
			var_11 := `Street Address`
			_, err = templBuffer.WriteString(var_11)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><th scope=\"col\" class=\"py-3 px-6\">")
			if err != nil {
				return err
			}
			var_12 := `City State`
			_, err = templBuffer.WriteString(var_12)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><th scope=\"col\" class=\"py-3 px-6\">")
			if err != nil {
				return err
			}
			var_13 := `Country`
			_, err = templBuffer.WriteString(var_13)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><th scope=\"col\" class=\"py-3 px-6\">")
			if err != nil {
				return err
			}
			var_14 := `Zip`
			_, err = templBuffer.WriteString(var_14)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th></tr></thead><tbody>")
			if err != nil {
				return err
			}
			for _, result := range inp.TableResults {
				_, err = templBuffer.WriteString("<tr class=\"bg-white border-b dark:bg-gray-800 dark:border-gray-700\"><th scope=\"row\" class=\"py-4 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white\">")
				if err != nil {
					return err
				}
				for idx, name := range result.Names {
					if idx > 0 {
						var_15 := `,&nbsp;`
						_, err = templBuffer.WriteString(var_15)
						if err != nil {
							return err
						}
					}
					_, err = templBuffer.WriteString(" ")
					if err != nil {
						return err
					}
					var var_16 string = name
					_, err = templBuffer.WriteString(templ.EscapeString(var_16))
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("</th><td class=\"py-4 px-6\"><p>")
				if err != nil {
					return err
				}
				var var_17 string = result.Address.StreetAddress
				_, err = templBuffer.WriteString(templ.EscapeString(var_17))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<br>")
				if err != nil {
					return err
				}
				var var_18 string = result.Address.StreetAddress2
				_, err = templBuffer.WriteString(templ.EscapeString(var_18))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</p></td><td class=\"py-4 px-6\">")
				if err != nil {
					return err
				}
				var var_19 string = result.Address.City
				_, err = templBuffer.WriteString(templ.EscapeString(var_19))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				var_20 := `,&nbsp;`
				_, err = templBuffer.WriteString(var_20)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				var var_21 string = result.Address.Region
				_, err = templBuffer.WriteString(templ.EscapeString(var_21))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td><td class=\"py-4 px-6\">")
				if err != nil {
					return err
				}
				var var_22 string = result.Address.Country
				_, err = templBuffer.WriteString(templ.EscapeString(var_22))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td><td class=\"py-4 px-6\">")
				if err != nil {
					return err
				}
				var var_23 string = result.Address.PostalCode
				_, err = templBuffer.WriteString(templ.EscapeString(var_23))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td></tr>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</tbody></table></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
